package subtask1

/*  Вы знаете комбинации: например, если вы возьмете 5 карт из колоды из 52 карт, у вас будет 2 598 960 различных
комбинаций. В математике количество комбинаций x, которые вы можете взять из набора из n элементов,
называется биномиальным коэффициентом n и x, или чаще n выбирает x.

ПОДСКАЗКА: одна из формул (для m = n выберите x) из комбинаторики может помочь вам с решением.

Вы известный дизайнер плакатов и художник. Вас просят предоставить 6 плакатов одинакового дизайна в двух цветах.
Плакаты должны иметь разную цветовую комбинацию, и у вас есть выбор из 4 цветов: красный, синий, желтый, зеленый.
Сколько цветов вы можете выбрать для каждого плаката?

Ответ - два, поскольку 4 выбирают 2 = 6. Комбинации будут следующими: {красный, синий}, {красный, желтый},
{красный, зеленый}, {синий, желтый}, {синий, зеленый}, {желтый, зеленый }.

Теперь тот же вопрос, но у вас есть 35 плакатов и 7 доступных цветов. Сколько цветов у каждого плаката?
Если вы возьмете комбинацию 7, выберите 2, вы получите 21 по приведенной выше формуле. Но 21 схемы недостаточно
для 35 плакатов. Если вы возьмете 7 и выберете 5 комбинаций, вы также получите 21. К счастью, если вы возьмете 7,
выберите 3 или 7, выберите 4 комбинации, вы получите 35, и поэтому каждый плакат будет иметь различную комбинацию из 3
или 5 цветов. Вы возьмете 3 цвета, потому что это дешевле.

Следовательно, проблема заключается в следующем:
зная m (количество плакатов для разработки), зная n (общее количество доступных цветов), давайте найдем x
(количество цветов для каждого плаката, чтобы каждый плакат имел уникальную комбинацию цветов, а количество комбинаций
было точно таким же как количество плакатов). Другими словами, вы должны создать функцию, которая принимает m (Int)
и n (Int) и возвращает x (Int). Еще несколько условий: m> = 0 и n> 0. Если много x решений, дайте в результате
наименьшее x. Может случиться так, что когда m задано случайным образом, нет x, удовлетворяющего уравнению (1),
тогда верните null.

Вот примеры:

[6, 4] вернет 2

[4, 4] вернет 1

[4, 2] вернет null


*/

class Combinator {

    fun checkChooseFromArray(array: Array<Int>): Int? {
        val m = array[0].toLong()
        val n = array[1]
        val x: Int

        for (i in 1..array[1]) {
            if ((fact(n) / m ==  (fact(n - i) * fact(i)))) {
                x = i
                return x
            }
        }
        //println(x)
        //return if (x != 0) x else null
        return null
    }

    private fun fact(number: Int): Long {
        var f = 1L
        for (i in 1..number) {
            f *= i
        }
        return f
    }


}
