package subtask3

/*  Начатая в 2008 году и недавно набравшая популярность, игра, известная как Number Neighbor или Text Door Neighbor,
предлагает пользователям отправлять текстовые сообщения на телефонные номера, расположенные рядом с их собственным.

Традиционно это было сделано для чисел ± 1, поэтому у человека с номером телефона 555-555-5555 есть соседи 555-555-5554
и 555-555-5556.

Мы собираемся пойти дальше и подумать о соседях на основе классической телефонной клавиатуры.

Во-первых, давайте взглянем на классическую клавиатуру телефона:
клавиатура телефона
Мы можем считать определенные числа смежными, если они расположены непосредственно рядом или выше /
ниже друг друга. Например, 1 находится рядом с 2 и 4 (и ничем другим), а 5 находится рядом с 2, 4, 6 и 8.

Давайте поищем телефонные номера, которые являются «соседями» данного телефонного номера, если любая (и только одна)
из их цифр будет отличаться друг от друга в качестве номера, смежного с исходным.

Согласно этому определению, 555-555-5555 имеет как своих первоначальных соседей, так и, например, 554-555-5555 и
555-555-5558.

Проблема

Учитывая телефонный номер строки из целых чисел длиной N (1 ≤ N ≤ 10) в виде числовой строки (например,
555-555-5555 будет передан как «5555555555»), верните массив всех телефонных номеров в виде числовых строк,
которые будут считается соседями этого номера телефона.

Примеры

Учитывая "1", возвращается ["2", "4"]

Если задано «8675309», возвращается [«5675309», «7675309», «9675309», «0675309», «8375309», «8575309», «8975309»,
«8645309», «8685309», «8672309», «8674309», «8676309», «8678309», «8675209», «8675609», «8675389», «8675306», «8675308»]

Заметки

При нахождении соседних цифр не оборачивайте клавиатуру стороной. То есть не считайте 6 смежными с 4 или 0 смежными с 2.
Не считайте числа, диагональные друг к другу, смежными. Если входной номер отрицательный, верните ноль.
Не беспокойтесь о порядке числовых строк в возвращаемом массиве.*/

class TelephoneFinder {

    // TODO: Complete the following function
    fun findAllNumbersFromGivenNumber(number: String): Array<String>? {
        if ((number.toInt() < 0)) return null else {
            val varNumbers = listOf(
                listOf("8"),    //0
                listOf("2", "4"),   //1
                listOf("2", "3", "5"),  //2
                listOf("2", "6"),   //3
                listOf("1", "5", "7"),  //    4
                listOf("2", "4", "6", "8"),  //5
                listOf("3", "5", "9"),  //6
                listOf("4", "8"),   //7
                listOf("0", "5", "7", "9"),  //8
                listOf("6", "8")    //9
            )

            println("Изменяемое число: $number")

            var strNumber = String()
            val array = ArrayList<String>()

            println("Строка в переменной: $strNumber")

            for (i in number.indices) {
                val s1 = number.substring(0, i + 1)
                val s2 = number.substring(i + 1, number.length)

                //println("Начало: $s1")
                //println("Конец: $s2")

                val n = number[i].toString().toInt()
                for (j in varNumbers[n].indices) {

                    //println("После дропа s1: ${s1.dropLast(1)}")

                    strNumber = s1.dropLast(1) + varNumbers[n][j] + s2
                    array.add(strNumber)
                }
                //strNumber = number
                //print(strNumber)
                //println()
            }

            array.toArray().toString()
            println(array)
            //println("Входная строка: $number")
            //return null
            return array.toTypedArray()
        }
    }
}
